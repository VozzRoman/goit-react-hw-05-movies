{"version":3,"file":"static/js/464.54f87d44.chunk.js","mappings":"uQAEaA,EAAaC,EAAAA,GAAAA,KAAH,6CAIVC,EAAQD,EAAAA,GAAAA,MAAH,wBAGLE,EAAeF,EAAAA,GAAAA,OAAH,+OAcZG,EAAQH,EAAAA,GAAAA,MAAH,kI,SCpBLI,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAQ5B,OACE,+BACE,SAAC,IAAD,WACE,UAACN,EAAD,CAAYM,SAVG,SAAAC,GACnBA,EAAEC,iBACFF,EAASC,EAAEE,cAAcC,KAAKC,OAE9BJ,EAAEE,cAAcC,KAAKC,MAAQ,EAC9B,EAKK,WACE,SAACT,EAAD,WACE,SAACE,EAAD,CACEQ,aAAa,MACbC,KAAK,OACLH,KAAK,OACLI,YAAY,SACZC,UAAU,aAGd,SAACZ,EAAD,CAAcU,KAAK,SAAnB,0BAKT,E,0BCpBKG,GAAWC,EAAAA,EAAAA,OAAK,kBAAM,0BAAN,IAiDtB,EA/Ce,WACb,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAIMC,EAASL,EAAaM,IAAI,UAEhCC,EAAAA,EAAAA,YAAU,WAAM,wCAId,gHAE2BC,EAAAA,EAAAA,IAAeH,GAF1C,UAEUI,EAFV,OAGUC,EAAOD,EAASC,KAAKC,QAC3BC,QAAQC,IAAIH,GACQ,IAAhBA,EAAKI,OALb,yCAMaC,MAAM,yCANnB,OAQIX,EAASM,GARb,kDAUIE,QAAQC,IAAR,MAVJ,2DAJc,sBACTR,GADS,mCAiBdW,EACD,GAAE,CAACX,IAUJ,OACE,2BACE,UAAC,IAAD,YACE,SAACnB,EAAD,CAAaC,SAXM,SAAAK,GACvB,GAAc,KAAVA,EACF,OAAOuB,MAAM,sBAEfd,EAAgB,CAAEgB,MAAM,GAAD,OAAKzB,KAC5BY,EAAS,GACV,KAMK,SAAC,EAAAc,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,OACpB,SAACvB,EAAD,CAAUwB,cAAelB,QAIhC,C,mKCrDKmB,EAAU,mCAGT,SAASC,IACf,OAAOC,EAAAA,EAAAA,GAAM,qBAAsB,CAClCC,OAAQ,CACPC,QAASJ,IAGX,CAEM,SAASK,EAAgBC,GAC/B,OAAOJ,EAAAA,EAAAA,GAAM,SAAD,OAAUI,EAAV,YAAwB,CACnCH,OAAQ,CACPC,QAASJ,IAGX,CAEM,SAASO,EAAeD,GAC9B,OAAOJ,EAAAA,EAAAA,GAAM,SAAD,OAAUI,EAAV,YAAwB,CACnCH,OAAQ,CACPC,QAASJ,IAGX,CAEM,SAASQ,EAAgBF,GAC/B,OAAOJ,EAAAA,EAAAA,GAAM,SAAD,OAAUI,GAAM,CAC3BH,OAAQ,CACPC,QAASJ,IAGX,CAEM,SAASd,EAAeuB,GAC9B,OAAOP,EAAAA,EAAAA,GAAM,uBAAD,OAAwBO,GAAe,CAClDN,OAAQ,CACPC,QAASJ,IAGX,CAxCDE,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["components/SearchMovie/SearchMovie.styled.js","components/SearchMovie/SearchMovie.jsx","Pages/Movies/Movies.jsx","apiService/apiService.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const SearchForm = styled.form`\nmargin-top: 30px;\n\n`;\nexport const Label = styled.label`\n`;\n\nexport const ButtonSearch = styled.button`\ncursor: pointer;\nbackground-color: orange;\ncolor: white;\nborder: none;\nheight: 35px;\nborder-radius: 4px;\nmargin-left: 10px;\ntransition: background-color 250ms linear;\n&:hover{\n\tbackground-color: blue;\n}\n`;\n\nexport const Input = styled.input`\npadding-left: 10px;\nwidth: 30%;\nheight: 30px;\n@media screen and (max-width: 980px){\n\twidth: 60%;\n}\n`;\n\n\n","import { ButtonSearch, Input, Label, SearchForm } from './SearchMovie.styled';\nimport PropTypes from 'prop-types';\nimport { Container } from 'components/App.styled';\nexport const SearchMovie = ({ onSubmit }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(e.currentTarget.name.value);\n\n    e.currentTarget.name.value = '';\n  };\n\n  return (\n    <>\n      <Container>\n        <SearchForm onSubmit={handleSubmit}>\n          <Label>\n            <Input\n              autoComplete=\"off\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"search\"\n              className=\"input\"\n            />\n          </Label>\n          <ButtonSearch type=\"submit\">Search</ButtonSearch>\n        </SearchForm>\n      </Container>\n    </>\n  );\n};\n\nSearchMovie.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { getSearchMovie } from 'apiService/apiService';\nimport { Container } from 'components/App.styled';\n// import HomeList from \"components/HomeList/HomeList\";\nimport { SearchMovie } from 'components/SearchMovie/SearchMovie';\nimport { Suspense, useEffect } from 'react';\nimport { Loader } from 'components/Loader/Loader';\nimport { useState } from 'react';\nimport { lazy } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nconst HomeList = lazy(() => import('../../components/HomeList/HomeList'));\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [films, setFilms] = useState([]);\n//   const location = useLocation();\n  // console.log(location.search);\n\n  const search = searchParams.get('query');\n\n  useEffect(() => {\n    if (!search) {\n      return;\n    }\n    async function searchMovie() {\n      try {\n        const response = await getSearchMovie(search);\n        const data = response.data.results;\n        console.log(data);\n        if (data.length === 0) {\n          return alert('No mathces please enter correct name');\n        }\n        setFilms(data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    searchMovie();\n  }, [search]);\n\n  const handleFromSubmit = value => {\n    if (value === '') {\n      return alert('the field is empty');\n    }\n    setSearchParams({ query: `${value}` });\n    setFilms([]);\n  };\n\n  return (\n    <main>\n      <Container>\n        <SearchMovie onSubmit={handleFromSubmit} />\n        <Suspense fallback={<Loader />} />\n        <HomeList trandingFilms={films} />\n      </Container>\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from \"axios\";\n\n\nconst API_KEY = \"45e036602b450491912e4761702a27c4\";\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport function getTrnadingMovie() {\n\treturn axios('trending/movie/day', {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t}\n\t})\n}\n\nexport function getCreditsMovie(id) {\n\treturn axios(`movie/${id}/credits`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t}\n\t})\n}\n\nexport function getReviewMovie(id) {\n\treturn axios(`movie/${id}/reviews`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t}\n\t})\n}\n\nexport function getDeteilsMovie(id) {\n\treturn axios(`movie/${id}`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t}\n\t})\n}\n\nexport function getSearchMovie(searchQuery) {\n\treturn axios(`search/movie?&query=${searchQuery}`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t}\n\t})\n}\n"],"names":["SearchForm","styled","Label","ButtonSearch","Input","SearchMovie","onSubmit","e","preventDefault","currentTarget","name","value","autoComplete","type","placeholder","className","HomeList","lazy","useSearchParams","searchParams","setSearchParams","useState","films","setFilms","search","get","useEffect","getSearchMovie","response","data","results","console","log","length","alert","searchMovie","query","Suspense","fallback","Loader","trandingFilms","API_KEY","getTrnadingMovie","axios","params","api_key","getCreditsMovie","id","getReviewMovie","getDeteilsMovie","searchQuery"],"sourceRoot":""}